name: Cache Docker images using GitHub Actions cache

description: |
  This GitHub Action caches Docker images using the GitHub Actions cache service. 
  It downloads the latest version of the Docker image and caches it for subsequent runs.

inputs:
  docker-image:
    description: 'The name of the Docker image to cache'
    required: true
    default: 'docker-image'
  cache-path:
    description: 'The path to the directory where the Docker image should be cached'
    required: false
    default: 'ci/cache/docker'

outputs:
  cache-hit:
    description: 'Whether the Docker image was restored from the cache'
    value: ${{ steps.cache-docker.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Get Docker image digest
      id: get-digest
      shell: bash
      env:
        DOCKER_IMAGE: ${{ inputs.docker-image }}
      run: |
        export IMAGE_NAME=$(echo "${DOCKER_IMAGE}" | awk -F: '{print $1}')
        export DOCKER_TAG=$(echo "${DOCKER_IMAGE}" | awk -F: '{print $2}')
        TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${IMAGE_NAME}:pull" | jq -r '.token')
        export DIGEST=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -H "Authorization: Bearer $TOKEN" "https://registry-1.docker.io/v2/${IMAGE_NAME}/manifests/${DOCKER_TAG}" | jq -r '.config.digest')
        export IMAGE_NAME_WITH_TAG=$(echo "${DOCKER_IMAGE}" | awk -F/ '{print $NF}')
        echo "DIGEST=${DIGEST}" >> $GITHUB_ENV
        echo "IMAGE_NAME_WITH_TAG=${IMAGE_NAME_WITH_TAG}" >> $GITHUB_ENV

    - name: Restore Docker image from cache
      id: cache-docker
      uses: actions/cache@v2
      with:
        path: ${{ inputs.cache-path }}
        key: ${{ steps.get-digest.outputs.image-name }}@${{ steps.get-digest.outputs.digest }}
        restore-keys: ${{ steps.get-digest.outputs.image-name }}

    - name: Pull latest Docker image
      id: pull-image
      shell: bash
      run: |
        docker pull ${{ inputs.docker-image }}

    - name: Save Docker image to cache
      if: steps.cache-docker.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p ${{ inputs.cache-path }}
        docker image save -o ${{ inputs.cache-path }}/${{ steps.get-digest.outputs.image-name }}@${{ steps.get-digest.outputs.digest }}.tar ${{ inputs.docker-image }}

    - name: Save cache
      if: steps.cache-docker.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ inputs.cache-path }}
        key: ${{ steps.get-digest.outputs.image-name }}@${{ steps.get-digest.outputs.digest }}
        restore-keys: ${{ steps.get-digest.outputs.image-name }}
