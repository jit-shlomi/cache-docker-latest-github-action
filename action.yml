name: Cache Docker images using GitHub Actions cache

description: |
  This GitHub Action caches Docker images using the GitHub Actions cache service. 
  It downloads the latest version of the Docker image and caches it for subsequent runs.

inputs:
  docker-image:
    description: 'The name of the Docker image to cache'
    required: true
    default: 'docker-image'
  cache-path:
    description: 'The path to the directory where the Docker image should be cached'
    required: false
    default: 'ci/cache/docker'

outputs:
  cache-hit:
    description: 'Whether the Docker image was restored from the cache'
    value: ${{ steps.cache-docker.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Get Docker image digest
      id: get-digest
      shell: bash
      env:
        DOCKER_IMAGE: ${{ inputs.docker-image }}
      run: |
        echo -------ls---------
        ls -la 
        chmod +x ./get_image_digest.sh
        source ./get_image_digest.sh "${{ inputs.docker-image }}"
        echo "digest=${DIGEST}" >> $GITHUB_ENV
        echo "image-name=${IMAGE_NAME_WITH_TAG}" >> $GITHUB_ENV

    - name: print cache1
      id: print-cache1
      shell: bash
      run: |
        if [ -d ${{ inputs.cache-path }} ]; then
          echo ------cache------
          ls -la ${{ inputs.cache-path }}
        else
          echo "Cache file doesn't exist yet"
        fi
        
        
    - name: Restore Docker image from cache
      id: cache-docker
      uses: actions/cache@v3
      with:
        path: ${{ inputs.cache-path }}
        key: ${{ env.image-name }}@${{ env.digest }}
        restore-keys: ${{ env.image-name }}
        
    - name: print cache2
      id: print-cache2
      shell: bash
      run: |
        if [ -d ${{ inputs.cache-path }} ]; then
          echo ------cache2------
          ls -la ${{ inputs.cache-path }}
        else
          echo "Cache file doesn't exist yet"
        fi

    - name: Pull latest Docker image
      id: pull-image
      shell: bash
      run: |
        if [ -f ${{ inputs.cache-path }}/${{ env.image-name }}.tar ]; then
          docker image load --input ${{ inputs.cache-path }}/${{ env.image-name }}.tar
        else
          echo "Cache file doesn't exist"
        fi
        docker pull ${{ inputs.docker-image }}
        mkdir -p ${{ inputs.cache-path }}
        echo ---1---
        ls -l ${{ inputs.cache-path }}/
        rm -f ${{ inputs.cache-path }}/${{ env.image-name }}*
        echo ---2---
        ls -l ${{ inputs.cache-path }}/
        docker image save ${{ inputs.docker-image }} --output ${{ inputs.cache-path }}/${{ env.image-name }}.tar
        
    - name: ls dir again
      id: ls-dir
      shell: bash
      run: |
        echo ---3---
        ls -l ${{ inputs.cache-path }}/
        echo ---4---


#     - name: Save Docker image to cache
#       if: steps.cache-docker.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         mkdir -p ${{ inputs.cache-path }}
#         docker image save -o ${{ inputs.cache-path }}/${{ env.image-name }}@${{ env.digest }}.tar ${{ inputs.docker-image }}

#     - name: Save cache
#       if: steps.cache-docker.outputs.cache-hit != 'true'
#       uses: actions/cache@v2
#       with:
#         path: ${{ inputs.cache-path }}
#         key: ${{ env.image-name }}@${{ env.digest }}
#        restore-keys: ${{ env.image-name }}
