name: Cache Docker images using GitHub Actions cache

description: |
  This GitHub Action caches Docker images using the GitHub Actions cache service. 
  It downloads the latest version of the Docker image and caches it for subsequent runs.

inputs:
  docker-image:
    description: 'The name of the Docker image to cache'
    required: true
    default: 'docker-image'
  docker-user:
    description: 'The docker registry user'
    required: false
    default: ''
  docker-password:
    description: 'The docker registry password'
    required: false
    default: ''
  cache-path:
    description: 'The path to the directory where the Docker image should be cached'
    required: false
    default: 'ci/cache/docker'

outputs:
  cache-hit:
    description: 'Whether the Docker image was restored from the cache'
    value: ${{ steps.cache-docker.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Get Docker image digest
      id: get-digest
      shell: bash
      env:
        DOCKER_IMAGE: ${{ inputs.docker-image }}
      run: |
        # Extract the registry, image name, and tag from the Docker image string
        export REGISTRY=$(echo "${DOCKER_IMAGE}" | awk -F/ '{print $1}')
        export IMAGE_NAME_WITH_TAG=$(echo "${DOCKER_IMAGE}" | awk -F/ '{print $NF}')
        export IMAGE_NAME=$(echo "${IMAGE_NAME_WITH_TAG}" | awk -F: '{print $1}')
        export DOCKER_TAG=$(echo "${IMAGE_NAME_WITH_TAG}" | awk -F: '{print $2}')
        if [ -z "${DOCKER_TAG}" ]; then DOCKER_TAG="latest"; fi
        
        # Get the Docker image digest from the registry API
        if [ "${REGISTRY}" = "ghcr.io" ]; then
          echo ========
          export DIGEST=$(docker manifest inspect ${{ inputs.docker-image }} | jq '.manifests[0].digest' | cut -d'"' -f2)
          if [ "$DIGEST" = "null" ] || [ -z "$DIGEST" ]; then
            export DIGEST=$(docker manifest inspect ${{ inputs.docker-image }} | jq '.config.digest' | cut -d'"' -f2)
          fi
        elif [[ "${REGISTRY}" =~ .*\.dkr\.ecr\..*\.amazonaws\.com ]]; then
          export AWS_SECRET_ACCESS_KEY="${{ inputs.docker-password }}"
          export AWS_ACCOUNT_ID=$(echo "${REGISTRY}" | cut -d'.' -f1)
          export TOKEN=$(aws ecr get-login-password | docker login --username AWS --password-stdin "${REGISTRY}")
          export DIGEST=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -H "Authorization: Bearer $TOKEN" "https://${REGISTRY}/v2/${IMAGE_NAME}/manifests/${DOCKER_TAG}" | jq -r '.config.digest')
        else
          # For other registries (e.g., Docker Hub), use anonymous authentication
          export DIGEST=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" "https://registry-1.docker.io/v2/${IMAGE_NAME}/manifests/${DOCKER_TAG}" | jq -r '.config.digest')
        fi
        
        # Set the environment variables for the digest and image name with tag
        export IMAGE_NAME_WITH_TAG="${IMAGE_NAME}:${DOCKER_TAG}"
        echo "digest=${DIGEST}" >> $GITHUB_ENV
        echo "image-name=${IMAGE_NAME_WITH_TAG}" >> $GITHUB_ENV

    - name: Restore Docker image from cache
      id: cache-docker
      uses: actions/cache@v3
      with:
        path: ${{ inputs.cache-path }}
        key: ${{ env.image-name }}@${{ env.digest }}
        restore-keys: ${{ env.image-name }}

    - name: Pull latest Docker image
      id: pull-image
      shell: bash
      run: |
        if [ -f ${{ inputs.cache-path }}/${{ env.image-name }}.tar ]; then
          docker image load --input ${{ inputs.cache-path }}/${{ env.image-name }}.tar
        else
          echo "Cache file doesn't exist"
        fi
        docker pull ${{ inputs.docker-image }}
        mkdir -p ${{ inputs.cache-path }}
        docker image save ${{ inputs.docker-image }} --output ${{ inputs.cache-path }}/${{ env.image-name }}.tar
